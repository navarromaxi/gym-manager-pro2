// ESTE ARCHIVO ES EL QUE MANEJA LA ENTRADA AL SOFTWARE

"use client";
//import { LoginSystem } from "@/components/login-system";
import { useState, useEffect, useMemo } from "react";
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card";
import { Button } from "@/components/ui/button";
import { Badge } from "@/components/ui/badge";
import {
  Users,
  DollarSign,
  AlertTriangle,
  TrendingUp,
  Calendar,
  UserPlus,
  X,
} from "lucide-react";

import type { MemberManagementProps } from "@/components/member-management";
import dynamic from "next/dynamic";

const LoginSystem = dynamic(
  () => import("@/components/login-system").then((m) => m.LoginSystem),
  { ssr: false }
);

// Carga perezosa (client-only) con un fallback liviano
const MemberManagement = dynamic(
  () =>
    import("@/components/member-management").then((m) => m.MemberManagement),
  {
    ssr: false,
    loading: () => <div className="p-4 text-sm">Cargando socios…</div>,
  }
) as React.ComponentType<any>;

const PaymentManagement = dynamic(
  () =>
    import("@/components/payment-management").then((m) => m.PaymentManagement),
  {
    ssr: false,
    loading: () => <div className="p-4 text-sm">Cargando pagos…</div>,
  }
);

const ProspectManagement = dynamic(
  () =>
    import("@/components/prospect-management").then(
      (m) => m.ProspectManagement
    ),
  { ssr: false }
);

const ExpenseManagement = dynamic<any>(
  () =>
    import("@/components/expense-management").then((m) => m.ExpenseManagement),
  { ssr: false }
);

const ReportsSection = dynamic<any>(
  () => import("@/components/reports-section").then((m) => m.ReportsSection),
  { ssr: false }
);

const InvoiceManagement = dynamic(
  () =>
    import("@/components/invoice-management").then(
      (m) => m.InvoiceManagement
    ),
  {
    ssr: false,
    loading: () => <div className="p-4 text-sm">Cargando facturas…</div>,
  }
);

const PlanManagement = dynamic<any>(
  () => import("@/components/plan-management").then((m) => m.PlanManagement),
  { ssr: false }
);

const CustomPlanManagement = dynamic(
  () =>
    import("@/components/custom-plan-management").then(
      (m) => m.CustomPlanManagement
    ),
  { ssr: false }
);

const OneTimePaymentManagement = dynamic(
  () =>
    import("@/components/one-time-payment-management").then(
      (m) => m.OneTimePaymentManagement
    ),
  { ssr: false }
);

const ActivityManagement = dynamic(
  () =>
    import("@/components/activity-management").then(
      (m) => m.ActivityManagement
    ),
  { ssr: false }
);

const RoutineManagement = dynamic(
  () =>
    import("@/components/routine-management").then((m) => m.RoutineManagement),
  { ssr: false }
);

const ClassRegistrationManagement = dynamic(
  () =>
    import("@/components/class-registration-management").then(
      (m) => m.ClassRegistrationManagement
    ),
  { ssr: false }
);

const InactiveManagement = dynamic(
  () =>
    import("@/components/inactive-management").then(
      (m) => m.InactiveManagement
    ),
  { ssr: false }
);

//Sigue aca
import { supabase } from "@/lib/supabase";
import { mapProspectStatusFromDb } from "@/lib/prospect-status";
import type {
  Member,
  Payment,
  Prospect,
  Expense,
  Plan,
  Activity,
  CustomPlan,
  OneTimePayment,
  ClassSession,
  ClassRegistration,
  Invoice,
  GymInvoiceConfig,
} from "@/lib/supabase";
import { mapGymInvoiceConfig } from "@/lib/supabase";
import { normalizeCustomPlanPayments } from "@/lib/custom-plan-payments";
import {
  buildOneTimePaymentMarker,
  isAutoGeneratedOneTimePayment,
} from "@/lib/one-time-payments";

const NEW_PROSPECT_STATUSES: Prospect["status"][] = ["averiguador"];
const PROSPECTS_PAGE_SIZE = 10;

// === Helpers de fecha/estado para el dashboard ===
const toLocalDate = (iso: string) => {
  const [year, month, day] = iso.split("-").map(Number);
  return new Date(year, month - 1, day);
};

const parseOptionalISODate = (iso?: string | null) => {
  if (!iso) return null;
  const parts = iso.split("-");
  if (parts.length !== 3) return null;
  const [yearStr, monthStr, dayStr] = parts;
  const year = Number(yearStr);
  const month = Number(monthStr);
  const day = Number(dayStr);
  if (Number.isNaN(year) || Number.isNaN(month) || Number.isNaN(day)) {
    return null;
  }
  const date = new Date(year, month - 1, day);
  date.setHours(0, 0, 0, 0);
  return Number.isNaN(date.getTime()) ? null : date;
};

const isOneTimePaymentDue = (payment: OneTimePayment): boolean => {
  const estimatedDate = parseOptionalISODate(payment.estimated_payment_date);
  if (!estimatedDate) {
    return false;
  }

  const today = new Date();
  today.setHours(0, 0, 0, 0);

  return estimatedDate.getTime() <= today.getTime();
};

const createSyntheticPaymentFromOneTime = (
  payment: OneTimePayment
): Payment => {
  const marker = buildOneTimePaymentMarker(payment.id);
  const descriptionParts = [
    "Pago único generado automáticamente",
    payment.description?.trim() || null,
  ].filter(Boolean);

  const description = `${descriptionParts.join(" - ")} ${marker}`.trim();

  return {
    id: `auto_one_time:${payment.id}`,
    gym_id: payment.gym_id,
    member_id: `one_time:${payment.id}`,
    member_name: payment.full_name || "Visitante pago único",
    amount: payment.amount ?? 0,
    date: payment.estimated_payment_date,
    start_date: payment.visit_date,
    plan: "Pago único",
    method: payment.payment_method || "Pago estimado",
    type: "product",
    description,
  };
};

const mergePaymentsWithDueOneTime = (
  payments: Payment[],
  oneTimePayments: OneTimePayment[]
): Payment[] => {
  const basePayments = payments.filter(
    (payment) => !isAutoGeneratedOneTimePayment(payment)
  );

  const syntheticPayments = oneTimePayments
    .filter(isOneTimePaymentDue)
    .map(createSyntheticPaymentFromOneTime);

  return normalizeCustomPlanPayments([...basePayments, ...syntheticPayments]);
};

const getRealStatus = (m: Member): "active" | "expired" | "inactive" => {
  const today = new Date();
  const next = toLocalDate(m.next_payment);
  const diffDays = Math.ceil((today.getTime() - next.getTime()) / 86400000);
  if (diffDays <= 0) return "active";
  if (diffDays <= 30) return "expired";
  return "inactive";
};

const DEFAULT_GYM_NAME = "Sistema de Gestión Multi-Gimnasio";

const sanitizeGymName = (name: string) => {
  const cleaned = name
    .replace(/^\s*Gimnasio\s+/i, "")
    .replace(/^['"]+|['"]+$/g, "")
    .trim();

  return cleaned.length > 0 ? cleaned : name.trim();
};

export default function GymManagementSystem() {
  const [activeTab, setActiveTab] = useState("dashboard");
  const [members, setMembers] = useState<Member[]>([]);
  const [payments, setPayments] = useState<Payment[]>([]);
  const [prospects, setProspects] = useState<Prospect[]>([]);
  const [prospectsPage, setProspectsPage] = useState(1);
  const [prospectsTotal, setProspectsTotal] = useState<number | null>(null);
  const [prospectsLoadingMore, setProspectsLoadingMore] = useState(false);
  const [expenses, setExpenses] = useState<Expense[]>([]);
  const [plans, setPlans] = useState<Plan[]>([]);
  const [activities, setActivities] = useState<Activity[]>([]);
  const [customPlans, setCustomPlans] = useState<CustomPlan[]>([]);
  const [oneTimePayments, setOneTimePayments] = useState<OneTimePayment[]>([]);
  const [classSessions, setClassSessions] = useState<ClassSession[]>([]);
  const [classRegistrations, setClassRegistrations] = useState<
    ClassRegistration[]
  >([]);
  const [invoices, setInvoices] = useState<Invoice[]>([]);
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [gymData, setGymData] = useState<{
    name: string;
    id: string;
    logo_url?: string | null;
    invoiceConfig?: GymInvoiceConfig | null;
  } | null>(null);
  const [memberFilter, setMemberFilter] = useState("all");
  const [loading, setLoading] = useState(false);
  const [pendingProspectStatusFilter, setPendingProspectStatusFilter] =
    useState<Prospect["status"] | "all" | null>(null);
  const [dismissedNextContactReminders, setDismissedNextContactReminders] =
    useState<string[]>([]);

  const displayGymName = gymData?.name
    ? sanitizeGymName(gymData.name)
    : DEFAULT_GYM_NAME;

  const handleLogin = (data: {
    name: string;
    id: string;
    logo_url?: string | null;
    invoiceConfig?: GymInvoiceConfig | null;
  }) => {
    setGymData({
      name: data.name,
      id: data.id,
      logo_url: data.logo_url ?? null,
      invoiceConfig: data.invoiceConfig ?? null,
    });
    setIsAuthenticated(true);

    supabase
      .from("gyms")
      .select(
        "logo_url, invoice_user_id, invoice_company_id, invoice_branch_code, invoice_branch_id, invoice_environment, invoice_customer_id, invoice_series, invoice_currency, invoice_cotizacion, invoice_typecfe, invoice_tipo_traslado, invoice_rutneg"
      )
      .eq("id", data.id)
      .single()
      .then(({ data: gym }) => {
        if (!gym) {
          return;
        }
        setGymData((prev) => {
          if (!prev) return prev;
          return {
            ...prev,
            logo_url: gym.logo_url ?? prev.logo_url ?? null,
            invoiceConfig: mapGymInvoiceConfig(gym as any),
          };
        });
      });
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    setGymData(null);
    setMembers([]);
    setPayments([]);
    setProspects([]);
    setProspectsPage(1);
    setProspectsTotal(null);
    setProspectsLoadingMore(false);
    setExpenses([]);
    setPlans([]);
    setActivities([]);
    setCustomPlans([]);
    setOneTimePayments([]);
    setClassSessions([]);
    setClassRegistrations([]);
    setInvoices([]);
  };

  // CARGAR DATOS DESDE SUPABASE
  const loadData = async (gymId: string) => {
    setLoading(true);
    try {
      console.log("Cargando datos para gym:", gymId);

      setProspectsPage(1);
      setProspectsTotal(null);
      setProspectsLoadingMore(false);

      // Cargar miembros
      const [
        { data: membersData, error: membersError },
        { data: paymentsData, error: paymentsError },
        { data: invoicesData, error: invoicesError },
        { data: expensesData, error: expensesError },
        { data: prospectsData, error: prospectsError, count: prospectsCount },
        { data: plansData, error: plansError },
        { data: activitiesData, error: activitiesError },
        { data: customPlansData, error: customPlansError },
        { data: oneTimePaymentsData, error: oneTimePaymentsError },
        { data: classSessionsData, error: classSessionsError },
        { data: classRegistrationsData, error: classRegistrationsError },
      ] = await Promise.all([
        supabase
          .from("members")
          .select(
            "id, gym_id, name, email, phone, referral_source, join_date, plan, plan_price, last_payment, next_payment, next_installment_due, status, inactive_level, inactive_comment, followed_up, balance_due"
          )
          .eq("gym_id", gymId)
          .order("balance_due", { ascending: false })
          .order("last_payment", { ascending: false }),
        supabase
          .from("payments")
          .select(
            "id, gym_id, member_id, member_name, amount, date, start_date, plan, method, card_brand, card_installments, type, description, plan_id"
          )
          .eq("gym_id", gymId)
          .order("date", { ascending: false }),
          supabase
          .from("invoices")
          .select(
            "id, gym_id, payment_id, member_id, member_name, total, currency, status, invoice_number, invoice_series, external_invoice_id, environment, typecfe, issued_at, due_date, request_payload, response_payload, created_at, updated_at"
          )
          .eq("gym_id", gymId)
          .order("issued_at", { ascending: false, nullsFirst: false })
          .order("created_at", { ascending: false, nullsFirst: false }),
        supabase
          .from("expenses")
          .select(
            "id, gym_id, description, amount, date, category, is_recurring"
          )
          .eq("gym_id", gymId)
          .order("date", { ascending: false }),
        supabase
          .from("prospects")
          .select(
            "id, gym_id, name, email, phone, contact_date, interest, status, notes, priority_level, scheduled_date, next_contact_date, created_at",
            { count: "exact" }
          )
          .eq("gym_id", gymId)
          .order("contact_date", { ascending: false, nullsFirst: false })
          .order("created_at", { ascending: false })
          .range(0, PROSPECTS_PAGE_SIZE - 1),
        supabase
          .from("plans")
          .select(
            "id, gym_id, name, description, price, duration, duration_type, activities, is_active"
          )
          .eq("gym_id", gymId),
        supabase
          .from("activities")
          .select(
            "id, gym_id, name, description, instructor, capacity, duration, schedule, is_active, created_at"
          )
          .eq("gym_id", gymId),
        supabase
          .from("custom_plans")
          .select(
            "id, gym_id, member_id, member_name, name, description, price, start_date, end_date, is_active"
          )
          .eq("gym_id", gymId),
        supabase
          .from("one_time_payments")
          .select(
            "id, gym_id, full_name, phone, source, amount, description, visit_date, estimated_payment_date, payment_method, created_at"
          )
          .eq("gym_id", gymId)
          .order("visit_date", { ascending: false }),
          supabase
          .from("class_sessions")
          .select(
            "id, gym_id, title, date, start_time, capacity, notes, created_at"
          )
          .eq("gym_id", gymId)
          .order("date", { ascending: true })
          .order("start_time", { ascending: true }),
        supabase
          .from("class_registrations")
          .select(
            "id, session_id, gym_id, full_name, email, phone, created_at"
          )
          .eq("gym_id", gymId),
      ]);

      if (membersError) {
        console.error("Error cargando miembros:", membersError);
      }

      if (paymentsError) {
        console.error("Error cargando pagos:", paymentsError);
      }

      if (expensesError) {
        console.error("Error cargando gastos:", expensesError);
      }

      if (invoicesError) {
        console.error("Error cargando facturas:", invoicesError);
      }

      if (prospectsError) {
        console.error("Error cargando interesados:", prospectsError);
      }

      if (plansError) {
        console.error("Error cargando planes:", plansError);
      }

      if (activitiesError) {
        console.error("Error cargando actividades:", activitiesError);
      }

      if (customPlansError) {
        console.error(
          "Error cargando planes personalizados:",
          customPlansError
        );
      }

      if (oneTimePaymentsError) {
        console.error("Error cargando pagos únicos:", oneTimePaymentsError);
      }

      if (classSessionsError) {
        console.error("Error cargando clases registradas:", classSessionsError);
      }

      if (classRegistrationsError) {
        console.error(
          "Error cargando inscripciones a clases:",
          classRegistrationsError
        );
      }

      setMembers(membersData || []);
      const normalizedPayments = normalizeCustomPlanPayments(
        (paymentsData ?? []) as Payment[]
      );
       const mergedPayments = mergePaymentsWithDueOneTime(
        normalizedPayments,
        oneTimePaymentsData || []
      );
      setPayments(mergedPayments);
      setInvoices((invoicesData ?? []) as Invoice[]);
      setExpenses(expensesData || []);
      const normalizedProspects = (prospectsData ?? []).map(
        (prospect: any) => ({
          ...prospect,
          status: mapProspectStatusFromDb(prospect.status),
        })
      ) as Prospect[];
      setProspects(normalizedProspects);
      setProspectsPage(normalizedProspects.length > 0 ? 1 : 0);
      setProspectsTotal(
        typeof prospectsCount === "number"
          ? prospectsCount
          : normalizedProspects.length
      );
      setPlans(plansData || []);
      setActivities(activitiesData || []);
      setCustomPlans(customPlansData || []);
      setOneTimePayments(oneTimePaymentsData || []);
      setClassSessions(classSessionsData || []);
      setClassRegistrations(classRegistrationsData || []);

      console.log("Datos cargados:", {
        members: membersData?.length || 0,
        payments: paymentsData?.length || 0,
        plans: plansData?.length || 0,
        activities: activitiesData?.length || 0,
        customPlans: customPlansData?.length || 0,
        oneTimePayments: oneTimePaymentsData?.length || 0,
        invoices: invoicesData?.length || 0,
        classSessions: classSessionsData?.length || 0,
        classRegistrations: classRegistrationsData?.length || 0,
      });
    } catch (error) {
      console.error("Error cargando datos:", error);
    } finally {
      setLoading(false);
    }
  };

  const reloadClassData = async () => {
    if (!gymData?.id) return;

    const [sessionsResponse, registrationsResponse] = await Promise.all([
      supabase
        .from("class_sessions")
        .select(
          "id, gym_id, title, date, start_time, capacity, notes, created_at"
        )
        .eq("gym_id", gymData.id)
        .order("date", { ascending: true })
        .order("start_time", { ascending: true }),
      supabase
        .from("class_registrations")
        .select(
          "id, session_id, gym_id, full_name, email, phone, created_at"
        )
        .eq("gym_id", gymData.id),
    ]);

    if (sessionsResponse.error) throw sessionsResponse.error;
    if (registrationsResponse.error) throw registrationsResponse.error;

    setClassSessions((sessionsResponse.data ?? []) as ClassSession[]);
    setClassRegistrations(
      (registrationsResponse.data ?? []) as ClassRegistration[]
    );
  };


  const loadMoreProspects = async () => {
    if (!gymData?.id) return;
    if (prospectsLoadingMore) return;
    if (prospectsTotal !== null && prospects.length >= prospectsTotal) return;

    const nextPage = prospectsPage + 1;
    const from = (nextPage - 1) * PROSPECTS_PAGE_SIZE;
    const to = from + PROSPECTS_PAGE_SIZE - 1;

    setProspectsLoadingMore(true);

    try {
      const { data, error, count } = await supabase
        .from("prospects")
        .select(
          "id, gym_id, name, email, phone, contact_date, interest, status, notes, priority_level, scheduled_date, next_contact_date, created_at",
          { count: "exact" }
        )
        .eq("gym_id", gymData.id)
        .order("contact_date", { ascending: false, nullsFirst: false })
        .order("created_at", { ascending: false })
        .range(from, to);

      if (error) throw error;

      const normalized = (data ?? []).map((prospect: any) => ({
        ...prospect,
        status: mapProspectStatusFromDb(prospect.status),
      })) as Prospect[];

      if (normalized.length > 0) {
        setProspects((prev) => {
          const existingIds = new Set(prev.map((p) => p.id));
          const merged = [...prev];
          for (const item of normalized) {
            if (!existingIds.has(item.id)) {
              merged.push(item);
            }
          }
          return merged;
        });
        setProspectsPage(nextPage);
      }

      if (typeof count === "number") {
        setProspectsTotal(count);
      }
    } catch (error) {
      console.error("Error cargando más interesados:", error);
    } finally {
      setProspectsLoadingMore(false);
    }
  };

  const handleProspectAdded = () => {
    setProspectsTotal((prev) => (typeof prev === "number" ? prev + 1 : prev));
  };

  const handleProspectRemoved = () => {
    setProspectsTotal((prev) => {
      if (typeof prev !== "number") return prev;
      const next = prev - 1;
      return next >= 0 ? next : 0;
    });
  };

  // Cargar datos cuando se autentica
  useEffect(() => {
    if (gymData?.id) {
      loadData(gymData.id);
    }
  }, [gymData?.id]);

  useEffect(() => {
    setPayments((currentPayments) =>
      mergePaymentsWithDueOneTime(currentPayments, oneTimePayments)
    );
  }, [oneTimePayments]);

  // Función para actualizar estados de miembros
  const updateMemberStatuses = (members: Member[]) => {
    const today = new Date();
    let hasChanges = false;

    const updatedMembers = members.map((member) => {
      const nextPayment = toLocalDate(member.next_payment);
      const diffTime = today.getTime() - nextPayment.getTime();
      const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));

      let status: "active" | "expired" | "inactive" = member.status;
      let inactiveLevel = member.inactive_level;

      if (nextPayment > today) {
        status = "active";
      } else if (diffDays > 0) {
        if (diffDays > 30) {
          status = "inactive";
          inactiveLevel = member.inactive_level || "yellow";
        } else {
          status = "expired";
        }
      } else {
        status = "expired";
      }

      if (status !== member.status || inactiveLevel !== member.inactive_level) {
        hasChanges = true;
        return { ...member, status, inactive_level: inactiveLevel };
      }
      return member;
    });
    return { members: updatedMembers, hasChanges };
  };

  // Aplicar actualización de estados
  useEffect(() => {
    if (members.length === 0) {
      return;
    }

    const { members: normalizedMembers, hasChanges } =
      updateMemberStatuses(members);

    if (hasChanges) {
      setMembers(normalizedMembers);
    }
  }, [members, setMembers]);

  // Calculate dashboard metrics
  /* const activeMembers = members.filter((m) => m.status === "active").length;
  const expiredMembers = members.filter((m) => m.status === "expired").length;
  const inactiveMembers = members.filter((m) => m.status === "inactive").length; */
  const {
    activeMembers,
    expiredMembers,
    inactiveMembers,
    upcomingExpirations,
    followUpCount,
  } = useMemo(() => {
    const now = new Date();
    const todayMs = now.getTime();
    let active = 0;
    let expired = 0;
    let inactive = 0;
    let upcoming = 0;
    let followUp = 0;

    members.forEach((member) => {
      const status = getRealStatus(member);
      if (status === "active") active += 1;
      else if (status === "expired") expired += 1;
      else inactive += 1;

      const next = toLocalDate(member.next_payment);
      const diffDaysToNext = Math.ceil((next.getTime() - todayMs) / 86400000);
      if (diffDaysToNext <= 7 && diffDaysToNext >= 0) {
        upcoming += 1;
      }

      const join = toLocalDate(member.join_date);
      const diffDaysFromJoin = Math.floor(
        (todayMs - join.getTime()) / 86400000
      );
      if (
        !member.followed_up &&
        diffDaysFromJoin >= 5 &&
        diffDaysFromJoin <= 12
      ) {
        followUp += 1;
      }
    });

    return {
      activeMembers: active,
      expiredMembers: expired,
      inactiveMembers: inactive,
      upcomingExpirations: upcoming,
      followUpCount: followUp,
    };
  }, [members]);

  const { monthlyIncome, monthlyExpenses, monthlyProfit } = useMemo(() => {
    const reference = new Date();
    const month = reference.getMonth();
    const year = reference.getFullYear();

    const planIncome = payments.reduce((sum, payment) => {
      const paymentDate = toLocalDate(payment.date);
      if (
        paymentDate.getMonth() === month &&
        paymentDate.getFullYear() === year
      ) {
        return sum + payment.amount;
      }
      return sum;
    }, 0);

    const income = planIncome;

    const expensesTotal = expenses.reduce((sum, expense) => {
      const expenseDate = toLocalDate(expense.date);
      if (
        expenseDate.getMonth() === month &&
        expenseDate.getFullYear() === year
      ) {
        return sum + expense.amount;
      }
      return sum;
    }, 0);

    return {
      monthlyIncome: income,
      monthlyExpenses: expensesTotal,
      monthlyProfit: income - expensesTotal,
    };
  }, [payments, expenses]);

  const hasMoreProspectsOnServer =
    typeof prospectsTotal === "number"
      ? prospects.length < prospectsTotal
      : false;

  const newProspectsCount = useMemo(
    () =>
      prospects.filter((prospect) =>
        NEW_PROSPECT_STATUSES.includes(prospect.status)
      ).length,
    [prospects]
  );

  const nextContactTomorrowCount = useMemo(() => {
    const tomorrow = new Date();
    tomorrow.setHours(0, 0, 0, 0);
    tomorrow.setDate(tomorrow.getDate() + 1);

    return prospects.reduce((count, prospect) => {
      if (!prospect.next_contact_date) {
        return count;
      }

      const parsed = new Date(`${prospect.next_contact_date}T00:00:00`);
      if (Number.isNaN(parsed.getTime())) {
        return count;
      }

      parsed.setHours(0, 0, 0, 0);
      return parsed.getTime() === tomorrow.getTime() ? count + 1 : count;
    }, 0);
  }, [prospects]);

  const getNextContactReminderKey = (prospect: Prospect) =>
    `next-contact:${prospect.id}:${prospect.next_contact_date ?? ""}`;

  const nextContactReminders = useMemo(() => {
    const tomorrow = new Date();
    tomorrow.setHours(0, 0, 0, 0);
    tomorrow.setDate(tomorrow.getDate() + 1);

    return prospects.filter((prospect) => {
      if (!prospect.next_contact_date) {
        return false;
      }

      const reminderKey = getNextContactReminderKey(prospect);
      if (dismissedNextContactReminders.includes(reminderKey)) {
        return false;
      }

      const parsed = new Date(`${prospect.next_contact_date}T00:00:00`);
      if (Number.isNaN(parsed.getTime())) {
        return false;
      }

      parsed.setHours(0, 0, 0, 0);
      return parsed.getTime() === tomorrow.getTime();
    });
  }, [prospects, dismissedNextContactReminders]);

  const handleDismissNextContactReminder = (key: string) => {
    setDismissedNextContactReminders((prev) =>
      prev.includes(key) ? prev : [...prev, key]
    );
  };

  const goToMembersWithFilter = (filter: string) => {
    setMemberFilter(filter);
    setActiveTab("members");
  };

  const goToProspects = (status?: Prospect["status"] | "all") => {
    if (typeof status === "undefined") {
      setPendingProspectStatusFilter(null);
    } else {
      setPendingProspectStatusFilter(status);
    }
    setActiveTab("prospects");
  };

  const renderDashboard = () => (
    <div className="space-y-6">
      <div>
        <h2 className="text-3xl font-bold tracking-tight">Dashboard</h2>
        <p className="text-muted-foreground">
          Resumen general de {gymData?.name}
        </p>
      </div>

      {loading && (
        <div className="text-center py-8">
          <p>Cargando datos desde la base de datos...</p>
        </div>
      )}

      {/* Metrics Cards */}
      <div className="grid gap-4 md:grid-cols-2 lg:grid-cols-4">
        <Card
          className="cursor-pointer hover:shadow-md transition-shadow"
          onClick={() => goToMembersWithFilter("active")}
        >
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Socios Activos
            </CardTitle>
            <Users className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-green-600">
              {activeMembers}
            </div>
            <p className="text-xs text-muted-foreground">
              Haz clic para ver detalles
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Ingresos del Mes
            </CardTitle>
            <DollarSign className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold">
              ${monthlyIncome.toLocaleString()}
            </div>
            <p className="text-xs text-muted-foreground">
              Gastos: ${monthlyExpenses.toLocaleString()}
            </p>
          </CardContent>
        </Card>

        <Card>
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Ganancia Mensual
            </CardTitle>
            <TrendingUp className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div
              className={`text-2xl font-bold ${
                monthlyProfit >= 0 ? "text-green-600" : "text-red-600"
              }`}
            >
              ${monthlyProfit.toLocaleString()}
            </div>
            <p className="text-xs text-muted-foreground">Ingresos - Gastos</p>
          </CardContent>
        </Card>

        <Card
          className="cursor-pointer hover:shadow-md transition-shadow"
          onClick={() => goToMembersWithFilter("expiring_soon")} // ✅ CORRECTO
        >
          <CardHeader className="flex flex-row items-center justify-between space-y-0 pb-2">
            <CardTitle className="text-sm font-medium">
              Vencimientos Próximos
            </CardTitle>
            <AlertTriangle className="h-4 w-4 text-muted-foreground" />
          </CardHeader>
          <CardContent>
            <div className="text-2xl font-bold text-orange-600">
              {upcomingExpirations}
            </div>
            <p className="text-xs text-muted-foreground">
              Haz clic para ver detalles
            </p>
          </CardContent>
        </Card>
      </div>

      {/* Status Overview */}
      <div className="grid gap-4 md:grid-cols-2">
        <Card>
          <CardHeader>
            <CardTitle>Estado de Socios</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            <div
              className="flex items-center justify-between cursor-pointer hover:bg-gray-50 p-2 rounded"
              onClick={() => goToMembersWithFilter("active")}
            >
              <div className="flex items-center space-x-2">
                <Badge variant="default">Activos</Badge>
                <span>{activeMembers} socios</span>
              </div>
              <span className="text-xs text-muted-foreground">Ver →</span>
            </div>
            <div
              className="flex items-center justify-between cursor-pointer hover:bg-gray-50 p-2 rounded"
              onClick={() => goToMembersWithFilter("expired")}
            >
              <div className="flex items-center space-x-2">
                <Badge variant="destructive">Vencidos</Badge>
                <span>{expiredMembers} socios</span>
              </div>
              <span className="text-xs text-muted-foreground">Ver →</span>
            </div>
            <div
              className="flex items-center justify-between cursor-pointer hover:bg-gray-50 p-2 rounded"
              onClick={() => goToMembersWithFilter("inactive")}
            >
              <div className="flex items-center space-x-2">
                <Badge variant="secondary">Inactivos</Badge>
                <span>{inactiveMembers} socios</span>
              </div>
              <span className="text-xs text-muted-foreground">Ver →</span>
            </div>
            <div
              className="flex items-center justify-between cursor-pointer hover:bg-gray-50 p-2 rounded"
              onClick={() => goToMembersWithFilter("all")}
            >
              <div className="flex items-center space-x-2">
                <Badge variant="outline">Total</Badge>
                <span>{members.length} socios</span>
              </div>
              <span className="text-xs text-muted-foreground">Ver todos →</span>
            </div>
          </CardContent>
        </Card>

        <Card>
          <CardHeader>
            <CardTitle>Alertas Importantes</CardTitle>
          </CardHeader>
          <CardContent className="space-y-4">
            {followUpCount > 0 && (
              <div
                className="flex items-center space-x-2 text-blue-600 cursor-pointer hover:bg-blue-50 p-2 rounded"
                onClick={() => goToMembersWithFilter("follow_up")}
              >
                <span>
                  📩 {followUpCount} socio{followUpCount > 1 ? "s" : ""} con
                  seguimiento pendiente (5–12 días)
                </span>
              </div>
            )}
            {upcomingExpirations > 0 && (
              <div
                className="flex items-center space-x-2 text-orange-600 cursor-pointer hover:bg-orange-50 p-2 rounded"
                onClick={() => goToMembersWithFilter("expiring_soon")}
              >
                <AlertTriangle className="h-4 w-4" />
                <span>
                  {upcomingExpirations} socios con vencimiento próximo
                </span>
              </div>
            )}
            {expiredMembers > 0 && (
              <div
                className="flex items-center space-x-2 text-red-600 cursor-pointer hover:bg-red-50 p-2 rounded"
                onClick={() => goToMembersWithFilter("expired")}
              >
                <Calendar className="h-4 w-4" />
                <span>{expiredMembers} socios con plan vencido</span>
              </div>
            )}
            {newProspectsCount > 0 && (
              <div
                className="flex items-center space-x-2 text-blue-600 cursor-pointer hover:bg-blue-50 p-2 rounded"
                onClick={() => goToProspects("averiguador")}
              >
                <UserPlus className="h-4 w-4" />
                <span>
                  {newProspectsCount} nuevos interesados por contactar (estado
                  "Averiguador")
                </span>
              </div>
            )}
            {nextContactTomorrowCount > 0 && (
              <div
                className="flex items-center space-x-2 text-purple-600 cursor-pointer hover:bg-purple-50 p-2 rounded"
                onClick={() => goToProspects("averiguador")}
              >
                <Calendar className="h-4 w-4" />
                <span>
                  {nextContactTomorrowCount} interesado
                  {nextContactTomorrowCount > 1 ? "s" : ""} para contactar
                  mañana
                </span>
              </div>
            )}
            {upcomingExpirations === 0 &&
              expiredMembers === 0 &&
              newProspectsCount === 0 &&
              nextContactTomorrowCount === 0 && (
                <div className="flex items-center space-x-2 text-green-600">
                  <span>✅ Todo en orden</span>
                </div>
              )}
          </CardContent>
        </Card>
      </div>
    </div>
  );

  if (!isAuthenticated) {
    return <LoginSystem onLogin={handleLogin} />;
  }

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center py-4">
            <div className="flex items-center space-x-4">
              {gymData?.logo_url && (
                <img
                  src={gymData.logo_url}
                  alt={`Logo de ${gymData.name}`}
                  className="h-12 w-12 rounded-full object-cover"
                />
              )}
              <div>
                <h1 className="text-[1.75rem] font-bold leading-tight text-gray-900">
                  {/* GymManagerPro 2.0 */}
                </h1>
                <p className="text-base text-gray-500">{displayGymName}</p>
              </div>
            </div>
            <Button variant="outline" onClick={handleLogout}>
              Cerrar Sesión
            </Button>
          </div>
        </div>
      </header>

      {/* Navigation */}
      <nav className="bg-white shadow-sm">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex flex-wrap gap-2 sm:flex-nowrap sm:gap-3 lg:gap-4">
            {[
              { id: "dashboard", label: "Dashboard" },
              { id: "members", label: "Socios" },
              { id: "payments", label: "Pagos" },
              { id: "prospects", label: "Interesados" },
              { id: "inactives", label: "Inactivos" },
              { id: "plans", label: "Planes" },
              { id: "custom_plans", label: "Personalizados" },
              { id: "one_time_payments", label: "Pago único" },
              { id: "class_registrations", label: "Clases/Evento" },
              { id: "activities", label: "Actividades" },
              { id: "routines", label: "Rutinas" },
              { id: "expenses", label: "Gastos" },
              { id: "reports", label: "Reportes" },
              { id: "invoices", label: "Facturas" },
            ].map((tab) => (
              <button
                key={tab.id}
                onClick={() => setActiveTab(tab.id)}
                className={`py-4 px-1 border-b-2 font-medium text-sm ${
                  activeTab === tab.id
                    ? "border-blue-500 text-blue-600"
                    : "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
                }`}
              >
                {tab.label}
              </button>
            ))}
          </div>
        </div>
      </nav>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8">
        {activeTab === "dashboard" && renderDashboard()}
        {activeTab === "members" && (
          <MemberManagement
            members={members}
            setMembers={setMembers}
            payments={payments}
            setPayments={setPayments}
            plans={plans}
            customPlans={customPlans}
            setCustomPlans={setCustomPlans}
            gymId={gymData?.id || ""}
            initialFilter={memberFilter}
            onFilterChange={setMemberFilter}
            serverPaging={true} // ← ACTIVAR
          />
        )}
        {activeTab === "payments" && (
          <PaymentManagement
            payments={payments}
            setPayments={setPayments}
            members={members}
            setMembers={setMembers}
            plans={plans}
            gymId={gymData?.id || ""}
            customPlans={customPlans}
            invoices={invoices}
            setInvoices={setInvoices}
            gymInvoiceConfig={gymData?.invoiceConfig ?? null}
          />
        )}
        {activeTab === "prospects" && (
          <ProspectManagement
            prospects={prospects}
            setProspects={setProspects}
            members={members}
            setMembers={setMembers}
            payments={payments}
            setPayments={setPayments}
            plans={plans}
            gymId={gymData?.id || ""}
            serverPaging
            hasMoreOnServer={hasMoreProspectsOnServer}
            onLoadMoreFromServer={loadMoreProspects}
            loadingMoreFromServer={prospectsLoadingMore}
            totalProspectsCount={prospectsTotal ?? undefined}
            onProspectAdded={handleProspectAdded}
            onProspectRemoved={handleProspectRemoved}
            externalStatusFilter={pendingProspectStatusFilter}
            onExternalStatusFilterApplied={() =>
              setPendingProspectStatusFilter(null)
            }
          />
        )}
        {activeTab === "expenses" && (
          <ExpenseManagement
            expenses={expenses}
            setExpenses={setExpenses}
            gymId={gymData?.id || ""}
          />
        )}
        {activeTab === "reports" && (
          <ReportsSection
            members={members}
            payments={payments}
            expenses={expenses}
            prospects={prospects}
            customPlans={customPlans}
            oneTimePayments={oneTimePayments}
            gymName={gymData?.name || ""}
          />
        )}
        {activeTab === "invoices" && (
          <InvoiceManagement
            invoices={invoices}
            setInvoices={setInvoices}
            payments={payments}
            gymId={gymData?.id || ""}
          />
        )}
        {activeTab === "plans" && (
          <PlanManagement
            plans={plans}
            setPlans={setPlans}
            activities={activities}
            gymId={gymData?.id || ""}
          />
        )}
        {activeTab === "custom_plans" && (
          <CustomPlanManagement
            customPlans={customPlans}
            setCustomPlans={setCustomPlans}
            members={members}
            payments={payments}
            setPayments={setPayments}
            gymId={gymData?.id || ""}
          />
        )}
        {activeTab === "one_time_payments" && (
          <OneTimePaymentManagement
            records={oneTimePayments}
            setRecords={setOneTimePayments}
            gymId={gymData?.id || ""}
          />
        )}
        {activeTab === "activities" && (
          <ActivityManagement
            activities={activities}
            setActivities={setActivities}
            gymId={gymData?.id || ""}
          />
        )}
        {activeTab === "class_registrations" && (
          <ClassRegistrationManagement
            gymId={gymData?.id || ""}
            sessions={classSessions}
            setSessions={setClassSessions}
            registrations={classRegistrations}
            setRegistrations={setClassRegistrations}
            onReload={reloadClassData}
          />
        )}
        {activeTab === "routines" && gymData?.id && (
          <RoutineManagement gymId={gymData.id} />
        )}
        {activeTab === "inactives" && (
          <InactiveManagement
            members={members}
            setMembers={setMembers}
            payments={payments}
          />
        )}
      </main>
      {activeTab === "dashboard" && nextContactReminders.length > 0 && (
        <div className="fixed bottom-4 right-4 z-50 flex w-80 flex-col gap-2">
          {nextContactReminders.map((prospect) => {
            const reminderKey = getNextContactReminderKey(prospect);

            return (
              <div
                key={reminderKey}
                className="flex items-start gap-3 rounded-md border border-purple-200 bg-purple-50 p-4 text-sm text-purple-800 shadow-lg"
              >
                <AlertTriangle className="mt-0.5 h-4 w-4 flex-shrink-0 text-purple-600" />
                <div className="flex-1">
                  <p className="font-semibold">
                    Mañana debes contactar a {prospect.name}
                  </p>
                  {prospect.interest ? (
                    <p className="text-xs text-purple-700">
                      Interés: {prospect.interest}
                    </p>
                  ) : null}
                  {prospect.phone ? (
                    <p className="text-xs text-purple-700">
                      Teléfono: {prospect.phone}
                    </p>
                  ) : null}
                </div>
                <button
                  type="button"
                  onClick={() => handleDismissNextContactReminder(reminderKey)}
                  className="ml-2 text-purple-600 transition hover:text-purple-800"
                  aria-label={`Cerrar recordatorio para ${prospect.name}`}
                >
                  <X className="h-4 w-4" />
                </button>
              </div>
            );
          })}
        </div>
      )}
    </div>
  );
}
